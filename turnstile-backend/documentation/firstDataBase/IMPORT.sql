DROP TABLE IF EXISTS inside_office CASCADE;
DROP TABLE IF EXISTS turnstile CASCADE;
DROP TABLE IF EXISTS badge CASCADE;
DROP TABLE IF EXISTS transactions CASCADE;
DROP TABLE IF EXISTS transaction_event CASCADE;
DROP TABLE IF EXISTS error_log CASCADE;
DROP TABLE IF EXISTS employee CASCADE;
DROP TABLE IF EXISTS visitor CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS permissions CASCADE;
DROP TABLE IF EXISTS company CASCADE;
DROP TABLE IF EXISTS role CASCADE;

CREATE TABLE ROLE (
    ID SERIAL PRIMARY KEY,
    LEVEL INT NOT NULL,
    DESCRIPTION VARCHAR(100)
);

CREATE TABLE COMPANY (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    ADDRESS VARCHAR(100) NOT NULL
);

CREATE TABLE BADGE (
	ID SERIAL PRIMARY KEY,
	RFID VARCHAR(150) UNIQUE NOT NULL
);

CREATE TABLE USERS (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    SURNAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL UNIQUE
);
	
CREATE TABLE PERMISSIONS (
    ID SERIAL PRIMARY KEY,
    ALLOWED_ENTER_TIME TIME NOT NULL,
    ALLOWED_EXIT_TIME TIME NOT NULL,
    END_OF_PERMISSION DATE NOT NULL,
    ROLE_ID INT,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ID) ON DELETE SET NULL
);

CREATE TABLE EMPLOYEE (
    ID SERIAL PRIMARY KEY,
    USER_ID INT UNIQUE NOT NULL,
    ROLE_ID INT NOT NULL,
    COMPANY_ID INT NOT NULL,
    PERMISSION_ID INT NOT NULL,
	BADGE_ID INT UNIQUE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID),
    FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID),
    FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(ID),
	FOREIGN KEY (BADGE_ID) REFERENCES BADGE (ID) ON DELETE SET NULL
);

CREATE TABLE VISITOR (
    ID SERIAL PRIMARY KEY,
    USER_ID INT UNIQUE NOT NULL,
    PERMISSION_ID INT NOT NULL,
	ROLE_ID INT NOT NULL,
	BADGE_ID INT UNIQUE NOT NULL,
	COMPANY_ID INT NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
	FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID),
	FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID),
    FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(ID),
	FOREIGN KEY (BADGE_ID) REFERENCES BADGE (ID)
);

CREATE TABLE TURNSTILE (
    ID SERIAL PRIMARY KEY,
    AVAILABLE BOOLEAN DEFAULT TRUE
);

CREATE TABLE INSIDE_OFFICE (
    ID SERIAL PRIMARY KEY,
    USER_ID INT REFERENCES USERS(ID) UNIQUE
);

CREATE TABLE TRANSACTIONS (
    ID SERIAL PRIMARY KEY,
    DATE DATE NOT NULL,
    ENTER_TIME TIME NOT NULL,
    CURRENT_STATE VARCHAR(50) NOT NULL, --POSSIBLE STATES(APPROVED, DENIED, ERROR)
    EXIT_TIME TIME,
    USER_ID INT NOT NULL,
    TURNSTILE_ID INT NOT NULL,
    FOREIGN KEY (TURNSTILE_ID) REFERENCES TURNSTILE (ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE TRANSACTION_EVENT (
    ID SERIAL PRIMARY KEY,
    STATE VARCHAR(100) NOT NULL, 				--POSSIBLE STATES(BADGE_PASSED, VALIDATING, OPEN_GATE, PASSING_THROUGH, CLOSING_GATE, COMPLETED)
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TRANSACTION_ID INT NOT NULL,
    FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTIONS(ID)
);

CREATE TABLE ERROR_LOG (
    ID SERIAL PRIMARY KEY,
    DATE DATE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ERROR_MESSAGE VARCHAR(255) NOT NULL,
    USER_ID INT NOT NULL,
    TURNSTILE_ID INT NOT NULL,
    FOREIGN KEY (TURNSTILE_ID) REFERENCES TURNSTILE (ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);
